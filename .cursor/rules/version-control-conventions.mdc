---
alwaysApply: true
---

# 버전 관리 규칙 (@AGENTS.md)

이 규칙은 [@AGENTS.md](../AGENTS.md)를 참조하여 작성되었으며, 커밋 메시지 작성 시 발생하는 다양한 트레이드오프를 고려한 실용적인 가이드라인을 제공합니다.

## 커밋 메시지 작성 트레이드오프

### 1. 길이 vs 명확성

**트레이드오프**: 짧은 커밋 메시지 vs 상세한 설명

**규칙**:

- **제목 라인**: 50자 이하로 제한 (간결성 우선)
- **본문**: 필요시 72자로 줄바꿈하여 상세 설명 (명확성 우선)
- **판단 기준**: 변경사항이 복잡하거나 비즈니스 로직에 영향을 미치면 본문 추가

```
예시:
feat: 사용자 인증 로직 개선

- JWT 토큰 갱신 메커니즘 추가
- 만료된 토큰 자동 처리 구현
- 보안 취약점 수정 (CVE-2024-xxxx)
```

### 2. 한국어 vs 영어

**트레이드오프**: 팀 내 소통의 명확성 vs 국제적 호환성

**규칙**:

- **기본 원칙**: 한국어 사용 (팀 내 소통 우선)
- **예외**: 오픈소스 기여, 국제 협업 시에만 영어
- **타입 접두사**: 영어 사용 (feat, fix, docs 등 - 국제 표준)

### 3. 기술적 세부사항 vs 비즈니스 맥락

**트레이드오프**: 개발자 관점의 정확성 vs 비개발자의 이해

**규칙**:

- **제목**: 비즈니스 관점에서 무엇을 했는지 (What)
- **본문**: 기술적 세부사항과 이유 (How, Why)

```
좋은 예:
feat: 회원가입 시 이메일 중복 검증 추가

나쁜 예:
fix: UserService.validateEmail() NullPointerException 수정
```

### 4. 일관성 vs 유연성

**트레이드오프**: 엄격한 형식 준수 vs 상황에 맞는 적응

**규칙**:

- **필수 형식**: `<타입>: <설명>` (일관성 우선)
- **유연한 적용**: 긴급 수정, 실험적 코드는 간소화 허용
- **타입 종류**:

### 커밋 타입 정의

| 타입           | 설명                                           | 예시                                     |
| -------------- | ---------------------------------------------- | ---------------------------------------- |
| **feat**       | 새로운 기능 추가                               | `feat: 사용자 로그인 기능 추가`          |
| **fix**        | 버그 수정                                      | `fix: 로그인 시 비밀번호 검증 오류 수정` |
| **docs**       | 문서 수정                                      | `docs: API 문서 업데이트`                |
| **style**      | 코드 포맷팅, 세미콜론 누락 등 (로직 변경 없음) | `style: 코드 포맷팅 및 린터 규칙 적용`   |
| **refactor**   | 코드 리팩토링 (기능 변경 없음)                 | `refactor: 사용자 서비스 로직 구조 개선` |
| **test**       | 테스트 코드 추가/수정                          | `test: 로그인 API 단위 테스트 추가`      |
| **chore**      | 빌드 업무, 패키지 매니저 설정 등               | `chore: 프로젝트 초기 설정`              |
| **build**      | 빌드 시스템 또는 외부 의존성 변경              | `build: webpack 설정 변경`               |
| **ci**         | CI 설정 파일 및 스크립트 변경                  | `ci: GitHub Actions 워크플로우 추가`     |
| **perf**       | 성능 개선                                      | `perf: 데이터베이스 쿼리 최적화`         |
| **revert**     | 이전 커밋 되돌리기                             | `revert: feat: 사용자 로그인 기능 추가`  |
| **security**   | 보안 관련 수정                                 | `security: XSS 취약점 수정`              |
| **wip**        | 작업 진행 중 (임시 커밋)                       | `wip: 사용자 프로필 API 구현 중`         |
| **experiment** | 실험적 코드 또는 프로토타입                    | `experiment: 새로운 UI 컴포넌트 실험`    |

### 스코프 사용 (선택사항)

특정 영역을 명시할 때 사용:

```
feat(auth): 소셜 로그인 기능 추가
fix(payment): 결제 실패 시 오류 처리 개선
docs(api): 인증 API 문서 업데이트
```

### 5. 단일 변경 vs 복합 변경

**트레이드오프**: 원자적 커밋 vs 실용적 작업 단위

**규칙**:

- **원칙**: 하나의 논리적 변경은 하나의 커밋
- **예외**: 밀접하게 관련된 변경사항은 묶어서 처리 허용
- **금지**: 서로 다른 기능/버그 수정을 하나의 커밋에 포함

```
허용되는 복합 변경:
feat: 사용자 프로필 페이지 구현
- UI 컴포넌트 추가
- API 연동 로직 구현
- 관련 테스트 코드 작성

금지되는 복합 변경:
feat: 사용자 프로필 페이지 구현 + 로그인 버그 수정
```

### 6. 즉시성 vs 완결성

**트레이드오프**: 빠른 배포 vs 완벽한 구현

**규칙**:

- **WIP 커밋**: `wip:` 접두사로 작업 중 상태 표시
- **임시 커밋**: 나중에 squash 또는 rebase로 정리
- **배포 전**: 모든 WIP 커밋은 정리된 커밋으로 변경

```
작업 중:
wip: 사용자 프로필 API 구현 중

최종:
feat: 사용자 프로필 API 구현
```

## 브랜치 전략 트레이드오프

### 기능 브랜치 vs 통합 브랜치

**규칙**:

- **기능 개발**: `feature/기능명` 브랜치 사용
- **버그 수정**: `fix/이슈명` 브랜치 사용
- **긴급 수정**: `hotfix/문제명` 브랜치 사용
- **통합**: main 브랜치로 merge 시 squash 고려

## 예외 상황 처리

### 1. 긴급 수정 (Hotfix)

- 형식 완화: `hotfix: 긴급 수정 내용`
- 상세 설명은 PR에서 보완

### 2. 실험적 코드

- `experiment:` 접두사 사용
- 나중에 정식 커밋으로 변환 또는 삭제

### 3. 의존성 업데이트

- `build: 의존성 업데이트`로 처리 (빌드 관련 변경사항)
- `chore: 개발 의존성 업데이트`로 처리 (개발 도구 관련)
- 보안 패치는 `security: 보안 취약점 패치`로 처리

이 규칙들은 프로젝트 상황에 따라 조정 가능하며, 팀의 생산성과 코드 품질의 균형을 맞추는 것을 목표로 합니다.
